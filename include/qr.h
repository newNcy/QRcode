#ifndef _QR_H
#define _QR_H
#include <stdio.h>
#include <malloc.h>
#include <string.h>
#include "reed-solomon.h"



#ifdef __cplusplus
extern "C" {
#endif
enum QR_EC_LEVEL {
    QR_EC_LEVEL_L,
    QR_EC_LEVEL_M,
    QR_EC_LEVEL_Q,
    QR_EC_LEVEL_H,
    QR_EC_LEVEL_MAX
};
enum QR_ENCODE_TYPE {
    QR_ENCODE_TYPE_NUM,
    QR_ENCODE_TYPE_ALPHA_NUM,
    QR_ENCODE_TYPE_BYTE,
    QR_ENCODE_TYPE_KANJI,
    QR_ENCODE_TYPE_MAX
};
enum QR_MASK_TYPE {
    QR_MASK_000,
    QR_MASK_001,
    QR_MASK_010,
    QR_MASK_011,
    QR_MASK_100,
    QR_MASK_101,
    QR_MASK_110,
    QR_MASK_111,
    QR_MASK_MAX
};

#define QR_VERSION(X)        ((X)-1)
#define QR_VERSION_STRING(X) (version_string[(X)-7])
#define QR_VERSION_MAX       (40)
#define QR_SIZE(X)           (21+4*(QR_VERSION(X)))

#define NONE_MODULE 0x00
#define WHITE_MODULE 0x01
#define BLACK_MODULE 0x02
#define RESERVE_MODULE 0x03


/*
 * qr code 的结构体
 */
struct _qr_
{
    int ver;
    int size;
    enum QR_EC_LEVEL  ec;
    enum QR_ENCODE_TYPE mode;
    enum QR_MASK_TYPE mask;

    int data_max;
    int codeword_max;
    unsigned char *codeword;
    unsigned char *data;
    unsigned char *matrix;
};
typedef struct _qr_* QR;

struct _pos
{
    int x;
    int y;
};
typedef struct _pos pos;
/*
 * 40个版本的byte模式下的所有最大容量
 */
static  int capacity
[QR_VERSION_MAX] //40 40个版本
[QR_ENCODE_TYPE_MAX]    //4  4种编码模式
[QR_EC_LEVEL_MAX]   //4  4种纠错等级
= {
    {{},{},{  17,  14,  11,   7},{} },//v1
    {{},{},{  32,  26,  20,  14},{} },//v2
    {{},{},{  53,  42,  32,  24},{} },//v3
    {{},{},{  78,  62,  46,  34},{} },//v4
    {{},{},{ 106,  84,  60,  44},{} },//v5
    {{},{},{ 134, 106,  74,  58},{} },//v6
    {{},{},{ 154, 122,  86,  64},{} },//v7
    {{},{},{ 192, 152, 108,  84},{} },//v8
    {{},{},{ 230, 180, 130,  98},{} },//v9
    {{},{},{ 271, 213, 151, 119},{} },//v10
    {{},{},{ 321, 251, 177, 137},{} },//v11
    {{},{},{ 367, 287, 203, 155},{} },//v12
    {{},{},{ 425, 331, 241, 177},{} },//v13
    {{},{},{ 458, 362, 258, 194},{} },//v14
    {{},{},{ 520, 412, 292, 220},{} },//v15
    {{},{},{ 586, 450, 322, 250},{} },//v16
    {{},{},{ 644, 504, 364, 280},{} },//v17
    {{},{},{ 718, 560, 394, 310},{} },//v18
    {{},{},{ 792, 624, 442, 338},{} },//v19
    {{},{},{ 858, 666, 482, 382},{} },//v20
    {{},{},{ 929, 711, 509, 403},{} },//v21
    {{},{},{1003, 779, 565, 439},{} },//v22
    {{},{},{1091, 857, 611, 461},{} },//v23
    {{},{},{1171, 911, 661, 511},{} },//v24
    {{},{},{1273, 997, 715, 535},{} },//v25
    {{},{},{1367,1059, 751, 593},{} },//v26
    {{},{},{1465,1125, 805, 625},{} },//v27
    {{},{},{1528,1190, 868, 658},{} },//v28
    {{},{},{1628,1264, 908, 698},{} },//v29
    {{},{},{1732,1370, 982, 742},{} },//v30
    {{},{},{1840,1452,1030, 790},{} },//v31
    {{},{},{1952,1538,1112, 842},{} },//v32
    {{},{},{2068,1628,1168, 898},{} },//v33
    {{},{},{2188,1722,1228, 958},{} },//v34
    {{},{},{2303,1809,1283, 983},{} },//v35
    {{},{},{2431,1911,1351,1051},{} },//v36
    {{},{},{2563,1989,1423,1093},{} },//v37
    {{},{},{2699,2099,1499,1139},{} },//v38
    {{},{},{2809,2213,1579,1219},{} },//v39
    {{},{},{2953,2331,1663,1273},{} },//v40
};


/* 
 * 码字总数
 */
 static int codeword_count []
 =
{
    26, 44, 70, 100, 134, 172, 196, 242, 292, 346,
    404, 466, 532, 581,655, 733, 815, 901, 991, 1085, 
    1156, 1258, 1364, 1474, 1588, 1706, 1825, 1921, 2051, 2185,
    2323, 2465, 2611, 2761, 2876, 3034, 3196, 3362, 3532, 3706
};

/* 
 * 填充的格子数
 */
static int remainder_bit_count[]
=
{
    0, 7, 7, 7, 7, 7, 0, 0, 0, 0, 
    0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 
    4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 
    3, 3, 3, 3, 0, 0, 0, 0, 0, 0
};

static unsigned char format_string[][QR_MASK_MAX][16]
=
{
    {  //L 0-7
        "111011111000100",
        "111001011110011",
        "111110110101010",
        "111100010011101",
        "110011000101111",
        "110001100011000",
        "110110001000001",
        "110100101110110"
    },
    {
        "101010000010010",
        "101000100100101",
        "101111001111100",
        "101101101001011",
        "100010111111001",
        "100000011001110",
        "100111110010111",
        "100101010100000"
    },
    {
        "011010101011111",
        "011000001101000",
        "011111100110001",
        "011101000000110",
        "010010010110100",
        "010000110000011",
        "010111011011010",
        "010101111101101"
    },
    {
        "001011010001001",
        "001001110111110",
        "001110011100111",
        "001100111010000",
        "000011101100010",
        "000001001010101",
        "000110100001100",
        "000100000111011"
    }
};

static unsigned char version_string[QR_VERSION_MAX][19]
=
{
    "000111110010010100", // v7
    "001000010110111100", // v8
    "001001101010011001", // v9
    "001010010011010011", // v10
    "001011101111110110", // v11
    "001100011101100010", // v12
    "001101100001000111", // v13
    "001110011000001101", // v14
    "001111100100101000", // v15
    "010000101101111000", // v16
    "010001010001011101", // v17
    "010010101000010111", // v18
    "010011010100110010", // v19
    "010100100110100110", // v20
    "010101011010000011", // v21
    "010110100011001001", // v22
    "010111011111101100", // v23
    "011000111011000100", // v24
    "011001000111100001", // v25
    "011010111110101011", // v26
    "011011000010001110", // v27
    "011100110000011010", // v28
    "011101001100111111", // v29
    "011110110101110101", // v30
    "011111001001010000", // v31
    "100000100111010101", // v32
    "100001011011110000", // v33
    "100010100010111010", // v34
    "100011011110011111", // v35
    "100100101100001011", // v36
    "100101010000101110", // v37
    "100110101001100100", // v38
    "100111010101000001", // v39
    "101000110001101001"  // v40
};
/* 
 * 小块回字的中心点坐标
 */
static int align_location[QR_VERSION_MAX] [7] 
= 
{
    {},
    {6,	18},
    {6,	22},
    {6,	26},
    {6,	30},
    {6,	34},
    {6,	22,	38},
    {6,	24,	42},
    {6,	26,	46},
    {6,	28,	50},
    {6,	30,	54},
    {6,	32,	58},
    {6,	34,	62},
    {6,	26,	46,	66},
    {6,	26,	48,	70},
    {6,	26,	50,	74},
    {6,	30,	54,	78},
    {6,	30,	56,	82},
    {6,	30,	58,	86},
    {6,	34,	62,	90},
    {6,	28,	50,	72,	94},
    {6,	26,	50,	74,	98},
    {6,	30,	54,	78,	102},
    {6,	28,	54,	80,	106},
    {6,	32,	58,	84, 110},
    {6,	30,	58,	86,	114},
    {6,	34,	62,	90,	118},
    {6,	26,	50,	74,	98 , 122},
    {6,	30,	54,	78,	102, 126},
    {6,	26,	52,	78,	104, 130},
    {6,	30,	56,	82,	108, 134},
    {6,	34,	60,	86,	112, 138},
    {6,	30,	58,	86,	114, 142},
    {6,	34,	62,	90,	118, 146},
    {6,	30,	54,	78,	102, 126, 150},
    {6,	24,	50,	76,	102, 128, 154},
    {6,	28,	54,	80,	106, 132, 158},
    {6,	32,	58,	84,	110, 136, 162},
    {6,	26,	54,	82,	110, 138, 166},
    {6,	30,	58,	86,	114, 142, 170}
};


/* 
 * 生成纠错码和数据交错的参数
 * 共40个版本 每个版本4个纠错等级的参数
 * 参数含义:
 * @ 0 每个block的纠错码个数
 * @ 1 第一组block数量
 * @ 2 第一组每个block的数据码个数
 * @ 3 第二组block数量
 * @ 4 第二组每个block的数据码个数
 */

static 
int ec_parameter 
[QR_VERSION_MAX]
[QR_EC_LEVEL_MAX]
[5]
=
{
    { //v1
        {  7,  1, 19,  0,  0},// level L
        { 10,  1, 16,  0,  0},// level M
        { 13,  1, 13,  0,  0},// level Q
        { 17,  1,  9,  0,  0} // level H
    },
    { //v2
        { 10,  1, 34,  0,  0},// level L
        { 16,  1, 28,  0,  0},// level M
        { 22,  1, 22,  0,  0},// level Q
        { 28,  1, 16,  0,  0} // level H
    },
    { //v3
        { 15,  1, 55,  0,  0},// level L
        { 26,  1, 44,  0,  0},// level M
        { 18,  2, 17,  0,  0},// level Q
        { 22,  2, 13,  0,  0} // level H
    },
    { //v4
        { 20,  1, 80,  0,  0},// level L
        { 18,  2, 32,  0,  0},// level M
        { 26,  2, 24,  0,  0},// level Q
        { 16,  4,  9,  0,  0} // level H
    },
    { //v5
        { 26,  1,108,  0,  0},// level L
        { 24,  2, 43,  0,  0},// level M
        { 18,  2, 15,  2, 16},// level Q
        { 22,  2, 11,  2, 12} // level H
    },
    { //v6
        { 18,  2, 68,  0,  0},// level L
        { 16,  4, 27,  0,  0},// level M
        { 24,  4, 19,  0,  0},// level Q
        { 28,  4, 15,  0,  0} // level H
    },
    { //v7
        { 20,  2, 78,  0,  0},// level L
        { 18,  4, 31,  0,  0},// level M
        { 18,  2, 14,  4, 15},// level Q
        { 26,  4, 13,  1, 14} // level H
    },
    { //v8
        { 24,  2, 97,  0,  0},// level L
        { 22,  2, 38,  2, 39},// level M
        { 22,  4, 18,  2, 19},// level Q
        { 26,  4, 14,  2, 15} // level H
    },
    { //v9
        { 30,  2,116,  0,  0},// level L
        { 22,  3, 36,  2, 37},// level M
        { 20,  4, 16,  4, 17},// level Q
        { 24,  4, 12,  4, 13} // level H
    },
    { //v10
        { 18,  2, 68,  2, 69},// level L
        { 26,  4, 43,  1, 44},// level M
        { 24,  6, 19,  2, 20},// level Q
        { 28,  6, 15,  2, 16} // level H
    },
    { //v11
        { 20,  4, 81,  0,  0},// level L
        { 30,  1, 50,  4, 51},// level M
        { 28,  4, 22,  4, 23},// level Q
        { 24,  3, 12,  8, 13} // level H
    },
    { //v12
        { 24,  2, 92,  2, 93},// level L
        { 22,  6, 36,  2, 37},// level M
        { 26,  4, 20,  6, 21},// level Q
        { 28,  7, 14,  4, 15} // level H
    },
    { //v13
        { 26,  4,107,  0,  0},// level L
        { 22,  8, 37,  1, 38},// level M
        { 24,  8, 20,  4, 21},// level Q
        { 22, 12, 11,  4, 12} // level H
    },
    { //v14
        { 30,  3,115,  1,116},// level L
        { 24,  4, 40,  5, 41},// level M
        { 20, 11, 16,  5, 17},// level Q
        { 24, 11, 12,  5, 13} // level H
    },
    { //v15
        { 22,  5, 87,  1, 88},// level L
        { 24,  5, 41,  5, 42},// level M
        { 30,  5, 24,  7, 25},// level Q
        { 24, 11, 12,  7, 13} // level H
    },
    { //v16
        { 24,  5, 98,  1, 99},// level L
        { 28,  7, 45,  3, 46},// level M
        { 24, 15, 19,  2, 20},// level Q
        { 30,  3, 15, 13, 16} // level H
    },
    { //v17
        { 28,  1,107,  5,108},// level L
        { 28, 10, 46,  1, 47},// level M
        { 28,  1, 22, 15, 23},// level Q
        { 28,  2, 14, 17, 15} // level H
    },
    { //v18
        { 30,  5,120,  1,121},// level L
        { 26,  9, 43,  4, 44},// level M
        { 28, 17, 22,  1, 23},// level Q
        { 28,  2, 14, 19, 15} // level H
    },
    { //v19
        { 28,  3,113,  4,114},// level L
        { 26,  3, 44, 11, 45},// level M
        { 26, 17, 21,  4, 22},// level Q
        { 26,  9, 13, 16, 14} // level H
    },
    { //v20
        { 28,  3,107,  5,108},// level L
        { 26,  3, 41, 13, 42},// level M
        { 30, 15, 24,  5, 25},// level Q
        { 28, 15, 15, 10, 16} // level H
    },
    { //v21
        { 28,  4,116,  4,117},// level L
        { 26, 17, 42,  0,  0},// level M
        { 28, 17, 22,  6, 23},// level Q
        { 30, 19, 16,  6, 17} // level H
    },
    { //v22
        { 28,  2,111,  7,112},// level L
        { 28, 17, 46,  0,  0},// level M
        { 30,  7, 24, 16, 25},// level Q
        { 24, 34, 13,  0,  0} // level H
    },
    { //v23
        { 30,  4,121,  5,122},// level L
        { 28,  4, 47, 14, 48},// level M
        { 30, 11, 24, 14, 25},// level Q
        { 30, 16, 15, 14, 16} // level H
    },
    { //v24
        { 30,  6,117,  4,118},// level L
        { 28,  6, 45, 14, 46},// level M
        { 30, 11, 24, 16, 25},// level Q
        { 30, 30, 16,  2, 17} // level H
    },
    { //v25
        { 26,  8,106,  4,107},// level L
        { 28,  8, 47, 13, 48},// level M
        { 30,  7, 24, 22, 25},// level Q
        { 30, 22, 15, 13, 16} // level H
    },
    { //v26
        { 28, 10,114,  2,115},// level L
        { 28, 19, 46,  4, 47},// level M
        { 28, 28, 22,  6, 23},// level Q
        { 30, 33, 16,  4, 17} // level H
    },
    { //v27
        { 30,  8,122,  4,123},// level L
        { 28, 22, 45,  3, 46},// level M
        { 30,  8, 23, 26, 24},// level Q
        { 30, 12, 15, 28, 16} // level H
    },
    { //v28
        { 30,  3,117, 10,118},// level L
        { 28,  3, 45, 23, 46},// level M
        { 30,  4, 24, 31, 25},// level Q
        { 30, 11, 15, 31, 16} // level H
    },
    { //v29
        { 30,  7,116,  7,117},// level L
        { 28, 21, 45,  7, 46},// level M
        { 30,  1, 23, 37, 24},// level Q
        { 30, 19, 15, 26, 16} // level H
    },
    { //v30
        { 30,  5,115, 10,116},// level L
        { 28, 19, 47, 10, 48},// level M
        { 30, 15, 24, 25, 25},// level Q
        { 30, 23, 15, 25, 16} // level H
    },
    { //v31
        { 30, 13,115,  3,116},// level L
        { 28,  2, 46, 29, 47},// level M
        { 30, 42, 24,  1, 25},// level Q
        { 30, 23, 15, 28, 16} // level H
    },
    { //v32
        { 30, 17,115,  0,  0},// level L
        { 28, 10, 46, 23, 47},// level M
        { 30, 10, 24, 35, 25},// level Q
        { 30, 19, 15, 35, 16} // level H
    },
    { //v33
        { 30, 17,115,  1,116},// level L
        { 28, 14, 46, 21, 47},// level M
        { 30, 29, 24, 19, 25},// level Q
        { 30, 11, 15, 46, 16} // level H
    },
    { //v34
        { 30, 13,115,  6,116},// level L
        { 28, 14, 46, 23, 47},// level M
        { 30, 44, 24,  7, 25},// level Q
        { 30, 59, 16,  1, 17} // level H
    },
    { //v35
        { 30, 12,121,  7,122},// level L
        { 28, 12, 47, 26, 48},// level M
        { 30, 39, 24, 14, 25},// level Q
        { 30, 22, 15, 41, 16} // level H
    },
    { //v36
        { 30,  6,121, 14,122},// level L
        { 28,  6, 47, 34, 48},// level M
        { 30, 46, 24, 10, 25},// level Q
        { 30,  2, 15, 64, 16} // level H
    },
    { //v37
        { 30, 17,122,  4,123},// level L
        { 28, 29, 46, 14, 47},// level M
        { 30, 49, 24, 10, 25},// level Q
        { 30, 24, 15, 46, 16} // level H
    },
    { //v38
        { 30,  4,122, 18,123},// level L
        { 28, 13, 46, 32, 47},// level M
        { 30, 48, 24, 14, 25},// level Q
        { 30, 42, 15, 32, 16} // level H
    },
    { //v39
        { 30, 20,117,  4,118},// level L
        { 28, 40, 47,  7, 48},// level M
        { 30, 43, 24, 22, 25},// level Q
        { 30, 10, 15, 67, 16} // level H
    },
    { //v40
        { 30, 19,118,  6,119},// level L
        { 28, 18, 47, 31, 48},// level M
        { 30, 34, 24, 34, 25},// level Q
        { 30, 20, 15, 61, 16} // level H
    } 
};

/*
 * 为字符串生成二维码
 */
QR qr_create(const char bytes[],enum QR_EC_LEVEL);

/*
 * 显示二维码
 */
void qr_view(QR qr);
int qr_json_len(QR qr,const char *name);
void qr_to_json(QR qr,const char * name,char *json);
/*
 * 释放二维码
 */

void qr_destroy(QR qr);

#ifdef __cplusplus
}
#endif
#endif
